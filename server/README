单线程的reactor模型不能发挥多核CPU性能
多线程reactor框架大致为：运行多个事件循环，主事件循环运行在主线程中，负责创建客户端连接，从事件循环运行在线程池中，负责读事件处理

为什么要增加工作线程
一个从reactor负责多个connection，每个连接的工作内容包括IO和计算（业务处理），IO不会阻塞事件循环，但是业务处理可能会阻塞事件循环
如果一个业务阻塞了事件循环，则处于同一个reactor中的所有连接都将被阻塞

业务线程的设计不应当出现阻塞的情况

多线程中一般使用智能指针来管理资源，否则会出现野指针的情况 

连接断开后应当立即关闭所关注的事件，因为从连接断开到函数析构之间有时间差，断开后将持续触发读事件，此时我们不应当关心，故需要立即关闭这些事件

class Connection : public std::enable_shared_from_this<Connection> //将this变为智能指针：this用shared_from_this()代替

对网络服务程序来说，在多线程的模型中使用锁来处理缓冲区并不是一个好的选择，锁的开销是很大的，上百万个连接，加锁肯定会影响性能
(在多线程程序中，使用锁将影响并发效率)

关于智能指针的使用：
1.若资源的生命周期难以确认，则使用shared_ptr
2.类自己拥有的资源用unique_ptr管理
3.对于不属于自己的，但会被本类使用的资源，在本类中使用裸指针管理（使用智能指针会比较麻烦）

去除空闲的tcp连接，传统做法是是利用alarm设置定时器，触发SIGALRM
linux新版本将定时器和信号抽象为了fd（timerfd和signalfd）

用信号让服务程序退出是很常见的处理方式

对于echoserver这种没有啥计算的服务器，可以直接省略工作线程，性能更佳

在网络程序中，超时处理是必须的，如果不想有超时，必须要有心跳处理